{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.getEventSourceWrapper = getEventSourceWrapper;\nvar eventCallbacks = [];\n\nfunction EventSourceWrapper(options) {\n  var source;\n  var lastActivity = new Date();\n  var listeners = [];\n\n  if (!options.timeout) {\n    options.timeout = 20 * 1000;\n  }\n\n  init();\n  var timer = setInterval(function () {\n    if (new Date() - lastActivity > options.timeout) {\n      handleDisconnect();\n    }\n  }, options.timeout / 2);\n\n  function init() {\n    source = new window.EventSource(options.path);\n    source.onopen = handleOnline;\n    source.onerror = handleDisconnect;\n    source.onmessage = handleMessage;\n  }\n\n  function handleOnline() {\n    if (options.log) console.log('[HMR] connected');\n    lastActivity = new Date();\n  }\n\n  function handleMessage(event) {\n    lastActivity = new Date();\n\n    for (var i = 0; i < listeners.length; i++) {\n      listeners[i](event);\n    }\n\n    eventCallbacks.forEach(function (cb) {\n      if (!cb.unfiltered && event.data.indexOf('action') === -1) return;\n      cb(event);\n    });\n  }\n\n  function handleDisconnect() {\n    clearInterval(timer);\n    source.close();\n    setTimeout(init, options.timeout);\n  }\n\n  return {\n    close: function close() {\n      clearInterval(timer);\n      source.close();\n    },\n    addMessageListener: function addMessageListener(fn) {\n      listeners.push(fn);\n    }\n  };\n}\n\n_c = EventSourceWrapper;\n\nfunction getEventSourceWrapper(options) {\n  if (!options.ondemand) {\n    return {\n      addMessageListener: function addMessageListener(cb) {\n        eventCallbacks.push(cb);\n      }\n    };\n  }\n\n  return EventSourceWrapper(options);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"EventSourceWrapper\");","map":{"version":3,"sources":["../../../../client/dev/error-overlay/eventsource.js"],"names":["eventCallbacks","lastActivity","listeners","options","init","timer","setInterval","handleDisconnect","source","window","console","i","cb","event","clearInterval","setTimeout","close","addMessageListener","EventSourceWrapper"],"mappings":";;;;AAAA,IAAMA,cAAc,GAApB,EAAA;;AAEA,SAAA,kBAAA,CAAA,OAAA,EAAqC;EACnC,IAAA,MAAA;EACA,IAAIC,YAAY,GAAG,IAAnB,IAAmB,EAAnB;EACA,IAAIC,SAAS,GAAb,EAAA;;EAEA,IAAI,CAACC,OAAO,CAAZ,OAAA,EAAsB;IACpBA,OAAO,CAAPA,OAAAA,GAAkB,KAAlBA,IAAAA;EAGFC;;EAAAA,IAAI;EACJ,IAAIC,KAAK,GAAGC,WAAW,CAAC,YAAY;IAClC,IAAI,IAAA,IAAA,KAAA,YAAA,GAA4BH,OAAO,CAAvC,OAAA,EAAiD;MAC/CI,gBAAgB;IAEnB;EAJsB,CAAA,EAIpBJ,OAAO,CAAPA,OAAAA,GAJH,CAAuB,CAAvB;;EAMA,SAAA,IAAA,GAAgB;IACdK,MAAM,GAAG,IAAIC,MAAM,CAAV,WAAA,CAAuBN,OAAO,CAAvCK,IAAS,CAATA;IACAA,MAAM,CAANA,MAAAA,GAAAA,YAAAA;IACAA,MAAM,CAANA,OAAAA,GAAAA,gBAAAA;IACAA,MAAM,CAANA,SAAAA,GAAAA,aAAAA;EAGF;;EAAA,SAAA,YAAA,GAAwB;IACtB,IAAIL,OAAO,CAAX,GAAA,EAAiBO,OAAO,CAAPA,GAAAA,CAAAA,iBAAAA;IACjBT,YAAY,GAAG,IAAfA,IAAe,EAAfA;EAGF;;EAAA,SAAA,aAAA,CAAA,KAAA,EAA8B;IAC5BA,YAAY,GAAG,IAAfA,IAAe,EAAfA;;IACA,KAAK,IAAIU,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGT,SAAS,CAA7B,MAAA,EAAsCS,CAAtC,EAAA,EAA2C;MACzCT,SAAS,CAATA,CAAS,CAATA,CAAAA,KAAAA;IAGFF;;IAAAA,cAAc,CAAdA,OAAAA,CAAwBY,UAAAA,EAAD,EAAQ;MAC7B,IAAI,CAACA,EAAE,CAAH,UAAA,IAAkBC,KAAK,CAALA,IAAAA,CAAAA,OAAAA,CAAAA,QAAAA,MAAiC,CAAvD,CAAA,EAA2D;MAC3DD,EAAE,CAAFA,KAAE,CAAFA;IAFFZ,CAAAA;EAMF;;EAAA,SAAA,gBAAA,GAA4B;IAC1Bc,aAAa,CAAbA,KAAa,CAAbA;IACAN,MAAM,CAANA,KAAAA;IACAO,UAAU,CAAA,IAAA,EAAOZ,OAAO,CAAxBY,OAAU,CAAVA;EAGF;;EAAA,OAAO;IACLC,KAAK,EAAE,iBAAM;MACXF,aAAa,CAAbA,KAAa,CAAbA;MACAN,MAAM,CAANA,KAAAA;IAHG,CAAA;IAKLS,kBAAkB,EAAE,4BAAA,EAAA,EAAc;MAChCf,SAAS,CAATA,IAAAA,CAAAA,EAAAA;IANJ;EAAO,CAAP;AAWK;;KAzDP,kB;;AAyDO,SAAA,qBAAA,CAAA,OAAA,EAAwC;EAC7C,IAAI,CAACC,OAAO,CAAZ,QAAA,EAAuB;IACrB,OAAO;MACLc,kBAAkB,EAAGL,4BAAAA,EAAD,EAAQ;QAC1BZ,cAAc,CAAdA,IAAAA,CAAAA,EAAAA;MAFJ;IAAO,CAAP;EAMF;;EAAA,OAAOkB,kBAAkB,CAAzB,OAAyB,CAAzB;AACD","sourcesContent":["const eventCallbacks = []\n\nfunction EventSourceWrapper(options) {\n  var source\n  var lastActivity = new Date()\n  var listeners = []\n\n  if (!options.timeout) {\n    options.timeout = 20 * 1000\n  }\n\n  init()\n  var timer = setInterval(function () {\n    if (new Date() - lastActivity > options.timeout) {\n      handleDisconnect()\n    }\n  }, options.timeout / 2)\n\n  function init() {\n    source = new window.EventSource(options.path)\n    source.onopen = handleOnline\n    source.onerror = handleDisconnect\n    source.onmessage = handleMessage\n  }\n\n  function handleOnline() {\n    if (options.log) console.log('[HMR] connected')\n    lastActivity = new Date()\n  }\n\n  function handleMessage(event) {\n    lastActivity = new Date()\n    for (var i = 0; i < listeners.length; i++) {\n      listeners[i](event)\n    }\n\n    eventCallbacks.forEach((cb) => {\n      if (!cb.unfiltered && event.data.indexOf('action') === -1) return\n      cb(event)\n    })\n  }\n\n  function handleDisconnect() {\n    clearInterval(timer)\n    source.close()\n    setTimeout(init, options.timeout)\n  }\n\n  return {\n    close: () => {\n      clearInterval(timer)\n      source.close()\n    },\n    addMessageListener: function (fn) {\n      listeners.push(fn)\n    },\n  }\n}\n\nexport function getEventSourceWrapper(options) {\n  if (!options.ondemand) {\n    return {\n      addMessageListener: (cb) => {\n        eventCallbacks.push(cb)\n      },\n    }\n  }\n  return EventSourceWrapper(options)\n}\n"]},"metadata":{},"sourceType":"script"}