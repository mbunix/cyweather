{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nexports.__esModule = true;\nexports.searchParamsToUrlQuery = searchParamsToUrlQuery;\nexports.urlQueryToSearchParams = urlQueryToSearchParams;\nexports.assign = assign;\n\nfunction searchParamsToUrlQuery(searchParams) {\n  var query = {};\n  searchParams.forEach(function (value, key) {\n    if (typeof query[key] === 'undefined') {\n      query[key] = value;\n    } else if (Array.isArray(query[key])) {\n      ;\n      query[key].push(value);\n    } else {\n      query[key] = [query[key], value];\n    }\n  });\n  return query;\n}\n\nfunction stringifyUrlQueryParam(param) {\n  if (typeof param === 'string' || typeof param === 'number' && !isNaN(param) || typeof param === 'boolean') {\n    return String(param);\n  } else {\n    return '';\n  }\n}\n\nfunction urlQueryToSearchParams(urlQuery) {\n  var result = new URLSearchParams();\n  Object.entries(urlQuery).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    if (Array.isArray(value)) {\n      value.forEach(function (item) {\n        return result.append(key, stringifyUrlQueryParam(item));\n      });\n    } else {\n      result.set(key, stringifyUrlQueryParam(value));\n    }\n  });\n  return result;\n}\n\nfunction assign(target) {\n  for (var _len = arguments.length, searchParamsList = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    searchParamsList[_key - 1] = arguments[_key];\n  }\n\n  searchParamsList.forEach(function (searchParams) {\n    Array.from(searchParams.keys()).forEach(function (key) {\n      return target[\"delete\"](key);\n    });\n    searchParams.forEach(function (value, key) {\n      return target.append(key, value);\n    });\n  });\n  return target;\n}","map":{"version":3,"sources":["../../../../../next-server/lib/router/utils/querystring.ts"],"names":["query","searchParams","Array","isNaN","String","result","Object","value","item","stringifyUrlQueryParam","searchParamsList","key","target"],"mappings":";;;;;;;;;AAEO,SAAA,sBAAA,CAAA,YAAA,EAEW;EAChB,IAAMA,KAAqB,GAA3B,EAAA;EACAC,YAAY,CAAZA,OAAAA,CAAqB,UAAA,KAAA,EAAA,GAAA,EAAgB;IACnC,IAAI,OAAOD,KAAK,CAAZ,GAAY,CAAZ,KAAJ,WAAA,EAAuC;MACrCA,KAAK,CAALA,GAAK,CAALA,GAAAA,KAAAA;IADF,CAAA,MAEO,IAAIE,KAAK,CAALA,OAAAA,CAAcF,KAAK,CAAvB,GAAuB,CAAnBE,CAAJ,EAA+B;MACpC;MAAEF,KAAK,CAAN,GAAM,CAALA,CAAD,IAACA,CAAD,KAACA;IADG,CAAA,MAEA;MACLA,KAAK,CAALA,GAAK,CAALA,GAAa,CAACA,KAAK,CAAN,GAAM,CAAN,EAAbA,KAAa,CAAbA;IAEH;EARDC,CAAAA;EASA,OAAA,KAAA;AAGF;;AAAA,SAAA,sBAAA,CAAA,KAAA,EAAuD;EACrD,IACE,OAAA,KAAA,KAAA,QAAA,IACC,OAAA,KAAA,KAAA,QAAA,IAA6B,CAACE,KAAK,CADpC,KACoC,CADpC,IAEA,OAAA,KAAA,KAHF,SAAA,EAIE;IACA,OAAOC,MAAM,CAAb,KAAa,CAAb;EALF,CAAA,MAMO;IACL,OAAA,EAAA;EAEH;AAEM;;AAAA,SAAA,sBAAA,CAAA,QAAA,EAEY;EACjB,IAAMC,MAAM,GAAG,IAAf,eAAe,EAAf;EACAC,MAAM,CAANA,OAAAA,CAAAA,QAAAA,EAAAA,OAAAA,CAAiC,gBAAkB;IAAA;IAAA,IAAjB,GAAiB;IAAA,IAAlB,KAAkB;;IACjD,IAAIJ,KAAK,CAALA,OAAAA,CAAJ,KAAIA,CAAJ,EAA0B;MACxBK,KAAK,CAALA,OAAAA,CAAeC,UAAAA,IAAD;QAAA,OAAUH,MAAM,CAANA,MAAAA,CAAAA,GAAAA,EAAmBI,sBAAsB,CAAjEF,IAAiE,CAAzCF,CAAV;MAAA,CAAdE;IADF,CAAA,MAEO;MACLF,MAAM,CAANA,GAAAA,CAAAA,GAAAA,EAAgBI,sBAAsB,CAAtCJ,KAAsC,CAAtCA;IAEH;EANDC,CAAAA;EAOA,OAAA,MAAA;AAGK;;AAAA,SAAA,MAAA,CAAA,MAAA,EAGY;EAAA,kCAHZ,gBAGY;IAHZ,gBAGY;EAAA;;EACjBI,gBAAgB,CAAhBA,OAAAA,CAA0BT,UAAAA,YAAD,EAAkB;IACzCC,KAAK,CAALA,IAAAA,CAAWD,YAAY,CAAvBC,IAAWD,EAAXC,EAAAA,OAAAA,CAAyCS,UAAAA,GAAD;MAAA,OAASC,MAAAA,UAAAA,CAAjDV,GAAiDU,CAAT;IAAA,CAAxCV;IACAD,YAAY,CAAZA,OAAAA,CAAqB,UAAA,KAAA,EAAA,GAAA;MAAA,OAAgBW,MAAM,CAANA,MAAAA,CAAAA,GAAAA,EAArCX,KAAqCW,CAAhB;IAAA,CAArBX;EAFFS,CAAAA;EAIA,OAAA,MAAA;AACD","sourcesContent":["import { ParsedUrlQuery } from 'querystring'\n\nexport function searchParamsToUrlQuery(\n  searchParams: URLSearchParams\n): ParsedUrlQuery {\n  const query: ParsedUrlQuery = {}\n  searchParams.forEach((value, key) => {\n    if (typeof query[key] === 'undefined') {\n      query[key] = value\n    } else if (Array.isArray(query[key])) {\n      ;(query[key] as string[]).push(value)\n    } else {\n      query[key] = [query[key] as string, value]\n    }\n  })\n  return query\n}\n\nfunction stringifyUrlQueryParam(param: string): string {\n  if (\n    typeof param === 'string' ||\n    (typeof param === 'number' && !isNaN(param)) ||\n    typeof param === 'boolean'\n  ) {\n    return String(param)\n  } else {\n    return ''\n  }\n}\n\nexport function urlQueryToSearchParams(\n  urlQuery: ParsedUrlQuery\n): URLSearchParams {\n  const result = new URLSearchParams()\n  Object.entries(urlQuery).forEach(([key, value]) => {\n    if (Array.isArray(value)) {\n      value.forEach((item) => result.append(key, stringifyUrlQueryParam(item)))\n    } else {\n      result.set(key, stringifyUrlQueryParam(value))\n    }\n  })\n  return result\n}\n\nexport function assign(\n  target: URLSearchParams,\n  ...searchParamsList: URLSearchParams[]\n): URLSearchParams {\n  searchParamsList.forEach((searchParams) => {\n    Array.from(searchParams.keys()).forEach((key) => target.delete(key))\n    searchParams.forEach((value, key) => target.append(key, value))\n  })\n  return target\n}\n"]},"metadata":{},"sourceType":"script"}